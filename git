### 01Git介绍


目标: 掌握git的基本定义和操作

#### Git是什么


Git版本控制系统是一个分布式的系统,是用来保存工程源代码历史状态(游戏存档)的命令行工具
Git是一个命令行（小黑窗）工具，用于版本控制（存档器）


#### Git的作用是什么？


版本管理工具：说人话就是可以记录你敲代码的每一个环节(类似于玩游戏存档)


#### Git应用场景介绍


- 多人开发代码管理
目前我们多人代码的时候，想把代码合并一起是利用最原始的复制粘贴操作。有了git之后，可以一键搞
- 异地开发代码管理
实际开发中，我们上班可能会用公司电脑敲代码。有时候回到家里用自己电脑偷偷加个班，以前的做法是备一个U盘，复制粘贴。有了git之后，直接一键搞定。
- 版本管理
比如现在公司网站已经做出来了1.0版本在使用，现在计划增加一些新功能，但是这个功能不稳定需要经过开发和测试环节，为了不影响现有的稳定版本。以前的做法是把稳定版本单独拷贝一份增加功能，等做好之后再把以前版本给替换掉。有了git之后可以一键搞定。

- 版本回滚：
比如这周产品经理提出一个功能，写了一周代码。到了下周，产品经理说这个功能不做了，要删掉改成其他功能。把代码删掉之后按照产品经理要求又写了一周代码。到了下下周，产品经理说这个功能还是没有上次那个好，还是改成上周的吧…………这时就可以回到之前的版本。

#### 版本管理工具还有其他的么？

git：目前使用最多的版本管理工具

svn：也有公司在用，用法与git类似（相当于腾讯视频和优酷视频）

### 02使用git的基本工作过程


目标：掌握git的基本工作流程

#### 9个常见操作

程序员比较高频的操作有9个。具体如下。

1.新建项目文件夹（只做一次）
2.进入文件夹 (重要)
3.初始化仓库：git init（只做一次）
4.编码
5.添加文件信息： git add .
6.确认添加信息：git commit -m"描述信息"
7.查看详细日志信息：git log
8.查看简略日志信息：git log --oneline
9.版本回滚:git reset --hard 版本号


第123步一个项目只需要一次，456步频繁使用，789步偶尔会用

1.新建文件夹

如果是老项目(已经存在的项目)，这步可以省略了。

2.启动进入git命令


进入这个文件夹， 点击右键选择Git Bash Here

打开git命令行工具

（小蓝窗）

1. 初始化项目

    在小蓝窗输入 git init

    注意：如果是老项目，这一步就省略了。git目录可能是隐藏的，需要设置为可见才能看到
2. 编码（程序员的日常工作）

    在这个目录下正常做开发：创建文件，修改文件内容....例如： 添加 index.txt，并写入一些内容（任意内容均可）
3. 添加存档
4. 命令:git add .

    注意：这个命令只是将文件信息添加到暂存区，还没有真正存档，需要使用git commit命令确认存档才可以
5. 确认存档
6. 命令 git commit -m "说明"

### 03 git的三个区

目标：理解git三个区的作用，掌握git add commit的用法

#### 三个区


- 工作区: 处理工作的区域

- 暂存区: 临时存放的区域

- 本地git仓库: 最终的存放区域

#### 通俗理解：

- 工作区: 在你电脑里看到的目录

- 暂存区: 在.git文件夹内的index中 (二进制记录)

- 版本库: 指的整个.git文件夹 (也认为是本地仓库)在代码中的体现

### 04查看提交信息


目标：掌握常见的查看提交信息的命令

查看提交记录：如下命令用来查看提交记录

- git log

- git log --oneline

- git reflog：这个命令可以查看你所有的提交的记录

### 05查看文件状态


目标：掌握查看文件状态的命令，能理解文件的4种状态

#### 内容


没有被托管的文件： 未跟踪

已被托管（曾经add,commit过）的文件：已修改，已暂存，已提交

命令

- 查看仓库文件的状态

    git status
- 查看简略版信息

    git status -s

![](https://secure2.wostatic.cn/static/kpGuj8ibqvfaMYVozc8VNr/image.png?auth_key=1690870518-m5NiHygyBsWYaTxZtz8ry5-0-b178481c6e3b5122fb3260d9cd80d9ff)

未跟踪（新增的文件）


已修改（文件曾经被Git记录过了，然后在工作区对他进行了修改）


已暂存（新增的文件，添加到暂存区之后的状态）


已提交（nothing to commit）表示没有什么东西可以提交了；即所有的内容都已经提交给git仓库了。
有的文档也把这个状态叫做 未修改，意思是自上次提交过后，代码还没有修改过



### 06代码恢复


目标：掌握代码恢复的方法

- 从工作区恢复：改动了代码，想放弃修改(此时并没有add)

    git status

    git restore 文件名
- 从暂存区恢复：改动了代码，也add了，此时想放弃。

    git reset HEAD 文件名

    git checkout -- 文件名
- 整体回滚

    git reset --hard 提交流水号

    会导致log信息不全。改用 git reflog

### 07文件_git忽略文件

目标：了解git忽略文件的作用和配置

有的时候, 我们某些文件/文件夹, 不想让git进行跟踪管理

这种场景下, 我们需要在.git文件夹隔壁, 来个叫做 .gitignore (固定名字)的忽略文件, 并写入忽略规则

可以编写如下这些规则

- 井号表示注释
- 忽略某个指定文件

    password.txt
- 忽略文件夹

    css
- 忽略文件夹下的某个文件

    css/index.js
- 忽略文件夹下某类文件

    css/*.js

然后根目录新建password.txt, 查看 git追踪到了哪些变化

  git status

发现只新增了.gitignore, 符合规则的都忽略掉了

### 
08远端仓库介绍


目标：什么是远端仓库


远端（远程）仓库其实就是远程的git服务器，帮我们存储代码的服务器。

本地git存储：一旦你电脑丢了或者硬盘损坏，直接扑街
远程git存储：如果你电脑坏了换了一个新的，只需要从网上重新下载即可


常见的远程仓库有哪些？

（1）github：免费。国外服务器，访问不稳定 。"全球最大的同性交友网站"

学习时候可以用，工作中有的小公司为了省钱也会用
（2）码云：免费。国内服务器。

（3）gitlab：

（4）私服：公司自己机房的服务器（工作中遇到）

以上远程仓库使用流程几乎一致。

远程仓库的作用：多人协作

- 远程仓库的使用流程leader（仓库的创建者，有最高的权限）
- 登录远程仓库，建立空项目；
- 给成员添加权限
- 成员登录远程仓库把代码拉到本地本地编辑，保存，提交代码

- 同步到远程

### 09远程仓库使用示例

目标：以码云为例，掌握远程仓库的使用

1.在码云网站建立仓库

2.将远程仓库克隆到本地

  git clone 仓库网址

  git clone:克隆，将整个远程仓库克隆到本地

  这个命名相当于拉取所有的代码(将整个远程仓库文件夹copy到你的本地)
这个命令一般只会在项目开始的时候执行一次
它会在本地创建目录。

3.本地编写代码


  git add . 与git commit -m“添加文件信息“

4.将本地代码推送到远程

  git push

5.将远程代码拉取到本地

  git pull :拉取，用于多人开发。比如别人写的代码文件提交到远程仓库，通过这个命令就可以将远程仓库代码拉取到本地

### 10远端仓库多人开发配置流程


目标：掌握多人开发的基本流程

内容


- leader（仓库的创建者）邀请其他开发者小花

- 小花成为开发者

- 小花clone 代码

- 小花正常开发项目

- git add .

- git commit -m ""

- 小花提交代码

- git push

git pull 的常见错误

1. 在pull之前要记得commit

合并冲突

合并：把两个版本的代码合在一起。

冲突：合并失败。

例如：

A同学改了a.txt的第一行，提交到了远程；
B同学本地仓库也改了a.txt的第一行，并commit
B同学git pull(从远程拉下来) 出现错误：两个人改了同一地方。

处理：

手动解决问题。看看使用什么代码add commit


### 11分支介绍

#### 问题导入


比如你的网站第一个版本已经做好发布了，功能也很稳定。现在准备新增一些功能开发2.0版本，问题是：如何去写代码？

如果在1.0的版本的基础上继续开发，那如何确保1.0的代码稳定呢？ 程序员的做法：切分支。

#### 理解分支


分支的本质是：一个指向某个版本的链接。

#### 分支的作用是什么?


可以独立开发和维护提交版本记录, 和别的分支互不影响, 尤其多人开发同一个项目, 可以分别控制自己的代码


#### 分支内功能开发完毕后, 需要最后一步做什么?


合并回到主分支, 保证最后主分支有所有模块的代码, 最后统一交付


#### 分支的应用场景


开发时按功能模块切分支


例如：有5个页面，切5个分支有bug时切分支开解决bug


#### git分支相关命令

![](https://secure2.wostatic.cn/static/uzZKAsLRKTjZeVhSHGzEf4/image.png?auth_key=1690871080-5z6BeaHg1zSojBADsgNnNJ-0-bc4a422f8b81c8c7c761c9bec5450cb2)

### 12.分支相关的典型操作

1. 查看分支

    命令：git branch

    功能：查看所有的分支

    说明：项目在初始时，就会有一个默认的分支，名字是：master。表示主分支。

2.新建分支  


  命令： git branch 分支名

  功能：创建新分支

  示例： git branch v2

3.切换分支


  命令：git checkout 分支名 （创建分支之后，你的代码默认还是在主分支，需要切换工作分支到子分支）

  功能：切换分支

  示例：git checkout v2

  注意：切换分支时，要先commit

4.在新的分支上进行编码


  提交代码的时候，指针也在移动

  // 改代码

  git add .

  git commit -m "提交3"

  // 改代码

  git add .

  git commit -m "提交4"

5.合并分支


  格式: git merge 分支名

  注意：merge之前，必须commit

  合并：假设当前在master分支，把v2分支的代码合并过来。合并的目的：是master中的代码和v2的代码是一样。让master上也具有v2的代码。

6.删除分支


  格式：git branch -d 分支名

  示例：git branch -d v2

  注意：

  删除分支，也需要切换当前工作分支为其他分支
删除分支，不会导致代码丢失
