### 3. npm与包

#### 3.1包


**1.什么是包**

  Node.js 中的第三方模块又叫做包。


  就像电脑和计算机指的是相同的东西，第三方模块和包指的是同一个概念，只不过叫法不同。

**2.包的来源**

  不同于Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。注意:Node.is 中的包都是免费且开源的，不需要付费即可免费下载使用。


**3.为什么需要包**

  由于Node.js 的内置模块仅提供了一些底层的API，导致在基于内置模块进行项目开发的时，效率很低。包是基于内置模块封装出来的，提供了更高级、更方便的API，极大的提高了开发效率。


  包和内置模块之间的关系，类似于jQuery和浏览器内置API之间的关系。

4.从哪里下载包


  国外有一家IT公司，叫做npm, lnc.这家公司旗下有一个非常著名的网站: [npm (npmjs.com)](https://www.npmjs.com/)，它是全球最大的包共享平台，你可以从这个网站上搜索到任何你需要的包，只要你有足够的而耐心!

  到目前位置，全球约1100多万的开发人员，通过这个包共享平台，开发并共享了超过120多万个包供我们使用。

  npm, Inc.公司提供了一个地址为[https://registry.npmjs.org](https://registry.npmjs.org/)的服务器，来对外共享所有的包，我们可以从这个服务器上下载自己所需要的包。

  注意：


  - 从https://www.npmjs.com/网站上搜索自己所需要的包

  - 从https://registry.npmjs.org/服务器上下载自己需要的包

5.如何下载包


  npm, Inc.公司提供了一个包管理工具，我们可以使用这个包管理工具，从https://registry.npmjs.org服务器把需要的包下载到本地使用。


  这个包管理工具的名字叫做Node Package Manager (简称npm 包管理工具)，这个包管理工具随着Node.js的安装包一起被安装到了用户的电脑上。


  大家可以在终端中执行npm -v命令，来查看自己电脑上所安装的npm 包管理工具的版本号

#### 3.2 npm初体验


**1.格式化时间的传统做法**
  - 创建格式化时间的自定义模块定义格式化时间的方法

  - 创建补零函数

  - 从自定义模块中导出格式化时间的函数
  - 导入格式化时问的自定义模块

  - 调用格式化时间的函数

**2.格式化时间的高级做法**
  - 使用npm包管理工具，在项目中安装格式化时间的包 moment
  - 使用require()导入格式化时间的包
  - 参考 moment的官方API文档对时间进行格式化

```JavaScript
// 1，导入moment包
const moment = require( "moment" )
// 2，参考moment官方API文档，调用对应的方法，对时问进行格式化
//2.1 调用moment(）方法，得到当前的时间
// 2.2针对当前的时间，调用format(）方法，按照指徒的格式进行时间的格式化
const dt = moment( ).format('YYYY-MM-DD HH:mm:ss')
console.log(dt)//输出2020-01-1217:23:48

```

**4.初次装包后多了哪些文件**

  初次装包完成后，在项目文件夹下多一个叫做node_modules 的文件夹和package-lock.json的配置文件。

  其中:
node_modules 文件夹用来存放所有已安装到项目中的包。require()导入第三方包时，就是从这个目录中查找并加载包.package-lock.json配置文件用来记录node modules 目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等。

**5.安装指定版本的包**

  默认情况下，使用npm install命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包，可以在包名之后，通过符号指定具体的版本，例如:

```JavaScript
npm i moment@2.22.2
```

**6.包的语义化版本规范**

  包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，例如2.24.0其中每一位数字所代表的的含义如下:


  - 第1位数字: 大版本
  - 第2位数字: 功能版本
  - 第3位数字: Bug修复版本


  版本号提升的规则:只要前面的版本号增长了，则后面的版本号归零。

#### 3.3包管理配置文件


  npm规定，在项目根目录中，必须提供一个叫做 package.json的包管理配置文件。用来记录与项目有关的一些配置信息。例如:

  - 项目的名称、版本号、描述等
  - 项目中都用到了哪些包

  - 哪些包只在开发期间会用到
  - 哪些包在开发和部署时都需要用到

**1.多人协作的问题**

  遇到的问题:第三方包的体积过大，不方便团队成员之间共享项目源代码。


  解决方案:共享时剔除node_modules


**2.如何记录项目中安装了哪些包**

  在项目根目录中，创建一个叫做 package.json的配置文件，即可用来记录项目中安装了哪些包。从而方便剔除node_modules目录之后，在团队成员之间兵亨项目的源代码。

  注意:今后在项目开发中，一定要把node_modules文件夹，添加到.gitignore 忽略文件中。

**3.快速创建package.json**

  npm包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建package.json这个包管理配置文件:

```JavaScript
//作用:在执行命令所处的目录中，快速新建package.json文件
npm init -y

```

  注意:
上述命令只能在英文的目录下成功运行!所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格。运行npm install 命令安装包的时候，npm包管理工具会自动把包的名称和版本号，记录到 package.json 中.

**4.dependencies节点**

  package.json文件中，有一个dependencies节点，专门用来记录您使用npm install命令安装了哪些包。

**5.一次性安装所有的包**

  当我们拿到一个剔除了node_modules的项目之后，需要先把所有的包下载到项目中，才能将项目运行起来。否则会报类似于下面的错误:


```JavaScript
//由于项目运行依赖于moment这个包，如果没有提前安裁好这个包，就会报如下的错误:
Error: Cannot find module "moment"
```

  可以运行npm install命令(或npm i)一次性安装所有的依赖包:

```JavaScript
//执行npm install命令时,npm包管理工具会先读取.package.json 中的dependencies 节点
///读取到记录的所有依赖包名称和版本号之后，npm 包管理工具会把这些包一次性下载到项中
npm install

```

**6.卸载包**

  可以运行npm uninstall命令，来卸载指定的包:


```JavaScript
//使用npm uninstall具体的包名来卸载包
npm uninstall moment
```

  注意: npm uninstall 命令执行成功后，会把卸载的包，自动从 packagejson的dependencies 中移除掉。

**7.devDependencies节点**

  如果某些包只在项目开发阶段会用到,在项目上线之后不会用到，则建议把这些包记录到devDependencies 节点中。


  与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到dependencies 节点中。

  您可以使用如下的命令，将包记录到devDependencies节点中:


```JavaScript
//安装指格定的包。并记录到devDependencies节点中
npm i 包名 -D
//注意:上述命令是简写形式。等价于下面完整的法:
npm install 包名 --save-dev

```

#### 3.4解决下包速度慢的问题


**1.为什么下包速度慢**

  在使用npm下包的时候，默认从国外的 [https://registry.npmjs.org](https://registry.npmjs.org) 服务器进行下载，此时，网络数据的传输需要经过漫长的海底光缆，因此下包速度会很慢。

**2.淘宝NPM镜像服务器**

  淘宝在国内搭建了一个服务器。专门把国外官方服务器上的包同步到国内的服务器，然后在国内提供下包的服务。从而极大的提高了下包的速度。
扩展:
镜像(Mirroring)是一种文件存储形式，一个磁盘上的数据在另一个磁盘上存在一个完全相同的副本即为镜像。

  ![](https://secure2.wostatic.cn/static/rGY1V2fKGhbemwYuLEeurL/image.png?auth_key=1697176803-4BxKf2Bznp4d6WcSSa54PV-0-d7c0d6218d9d24d7276b8b4fce8558ee)

**3.切换npm的下包镜像源**

  下包的镜像源，指的就是下包的服务器地址。


```JavaScript
//查看当前的下包镜像源
npm config get registry
//将下包的镜像源切换为淘宝镜像源
npm config set registry=https://registry.npm.taobao.org/
//检查镜像源是否下载成功
npm config get registry

```

4.nrm


  为了更方便的切换下包的镜像源，我们可以安装nrm这个小工具，利用nrm提供的终端命令,可以快速查看和切换下包的镜像源

```JavaScript
//通过npm包管理器,将nrm安装为全局可用的工具
 npm nrm -g
//查看所有可用的镜像源
 nrm ls
//将下包的镜像源切换为taobao镜像
nrm use taobao

```

  ![](https://secure2.wostatic.cn/static/nka5hrQfxmuAPmNbnF6Bgc/image.png?auth_key=1697176803-quBn5pdf69K3URdr55Cah3-0-dd69e4dcb3d74ca1056ada0ae06bd937)

#### 3.5包的分类


**1.项目包**


  那些被安装到项目的node_modules目录中的包，都是项目包。


  项目包又分为两类,分别是:


  - 开发依赖包(被记录到devDependencies节点中的包，只在开发期间会用到)

  - 核心依赖包（被记录到dependencies节点中的包，在开发期间和项目上线之后都会用到)


```JavaScript
npm i 包名-D #开发依赖包(会被记录到devDependencies节点下)
npm i 包名   #核心依赖包(会被记录到dependencies节点下)
```

**2.全局包**

  在执行npm install命令时，如果提供了-g参数，则会把包安装为全局包。


  全局包会被安装到C:\Users用户目录AppData\Roaminginpm\node_modules目录下。


```JavaScript
npm i 包名-g//全局安装指定的包
npm uninstall包名-g//全局卸载安装的包

```

  注意:


  - 只有工具性质的包，才有全局安装的必要性。因为它们提供了好用的终端命令。
  - 判断某个包是否需要全局安装后才能使用，可以参考官方提供的使用说明即可。


**3.i5ting_toc**

  i5ting_toc是一个可以把md文档转为 html页面的小工具，使用步骤如下:

```JavaScript
#将i5ting_toc安装为全局包
npm install -g i5ting toc
#调用i5ting_toc，轻松实现md 转html的功能
i5ting_toc -f 要转换的md文件路径 -o

```

#### 3.6规范的包结构


  在清楚了包的概念、以及如何下载和使用包之后，接下来，我们深入了解一下包的内部结构。


  一个规范的包，它的组成结构，必须符合以下3点要求:

  - 包必须以单独的目录而存在
  - 包的顶级目录下要必须包含package.json这个包管理配置文件

  - package.json 中必须包含name，version，main这三个属性，分别代表包的名字、版本号、包的入口.

  注意:以上3点要求是一个规范的包结构必须遵守的格式，关于更多的约束，可以参考如下网址:[https://yarnpkg.com/zh-Hans/docs/package-json](https://yarnpkg.com/zh-Hans/docs/package-json)

### 4.模块的加载机制


#### 4.1优先从缓存中加载


  模块在第一次加载后会被缓存。这也意味着多次调用require()不会导致模块的代码被执行多次。


  注意:不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。

#### 4.2内置模块的加载机制

  内置模块是由Node.js官方提供的模块，内置模块的加载优先级最高。

  例如，require('fs')始终返回内置的fs模块，即使在node_modules目录下有名字相同的包也叫做fs。


#### 4.3自定义模块的加载机制


  使用require()加载自定义模块时，必须指定以./或../开头的路径标识符。在加载自定义模块时，如果没有指定/或../这样的路径标识符，则 node会把它当作内置模块或第三方模块进行加载。


  同时，在使用require()导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件:

  - 按照确切的文件名进行加载

  - 补全.js扩展名进行加载
  - 补全.json扩展名进行加载
  - 补全.node扩展名进行加载
  - 加载失败，终端报错

#### 4.4第三方模块的加载机制


  如果传递给require()的模块标识符不是一个内置模块，也没有以'./'或'../'开头，则Node.js会从当前模块的父目录开始，尝试从/node_modules文件夹中加载第三方模块。


  如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。


  例如，假设在'C\Users\itheima\project\foo.js’文件里调用了require('tools')，则 Node.js 会按以下顺序查找:

  - C:\Users\itheima\project\node_modules\tools

  - C:\Users\itheima\node_modules\tools

  - C:\Users\node_modules\tools

  - C:\node modules\tools

#### 4.5目录作为模块

  当把目录作为模块标识符，传递给require(进行加载的时候，有三种加载方式:

  - 在被加载的目录下查找一个叫做package.json 的文件，并寻找main属性，作为require()加载的入口
  - 如果目录里没有package.json文件，或者main 入口不存在或无法解析，则Nodejs将会试图加载目录下的 indexjs文件。
  - 如果以上两步都失败了，则Node.js 会在终端打印错误消息，报告模块的缺失:Error:Cannot find module 'xooi
